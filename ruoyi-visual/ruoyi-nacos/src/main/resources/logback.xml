<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 应用名称 -->
    <property name="appName" value="${project.artifactId}"/>

    <!-- 控制台日志输出格式 -->
    <property name="console.log.pattern"
              value="[%tid] %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{50}.%method:%L) - %msg%n"/>
    <!-- 日志文件输出格式 -->
    <property name="log.pattern" value="[%tid] %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"/>

    <!-- 日志存放路径 -->
    <property name="log.path" value="/logs/ruoyi/ruoyi-visual/${appName}"/>
    <!-- 定义存储日志文件路径 -->
    <property name="log.file" value="${log.path}/${appName}.log"/>
    <!-- 定义历史日志文件路径 -->
    <property name="history.log.file" value="${log.path}/%d{yyyy-MM-dd}/${appName}-%i.log.zip"/>
    <!-- 定义错误日志文件路径 -->
    <property name="error.log.file" value="${log.path}/error/${appName}_error.log"/>
    <!-- 定义错误历史日志文件路径 -->
    <property name="history.error.log.file"
              value="${log.path}/%d{yyyy-MM-dd}/error/${appName}_error-%i.log.zip"/>

    <!-- 日志文件大小,超过这个大小将被压缩 -->
    <property name="log.max.size" value="100MB"/>
    <!-- 日志最大的历史 60天 -->
    <property name="log.max.history" value="60"/>
    <!-- 日志文件保留的总的最大大小-->
    <property name="total.size.cap" value="20GB"/>

    <!-- 控制台输出 tid -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout">
                <pattern>${console.log.pattern}</pattern>
            </layout>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--RollingFileAppender继承自FileAppender，具有轮转日志文件的功能,是我们最常使用的Appender-->
    <appender name="file_all" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 设置日志不超过${log.max.size}时的保存路径 -->
        <file>${log.file}</file>
        <!-- SizeAndTimeBasedRollingPolicy是基于时间和大小的滚动策略，几乎可以涵盖所有日志滚动需求场景，也是使用最多的策略 -->
        <!-- 该策略适用于1.1.7版本及之后的版本，之前的版本继续采用TimeBasedRollingPolicy加SizeAndTimeBasedFNATP组件实现 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件名格式 -->
            <fileNamePattern>${history.log.file}</fileNamePattern>
            <!-- 单个日志文件最大大小，当文件达到该大小则触发截断（以及压缩）-->
            <maxFileSize>${log.max.size}</maxFileSize>
            <!--只保留最近60天的日志-->
            <maxHistory>${log.max.history}</maxHistory>
            <!-- 日志文件保留的总的最大大小-->
            <totalSizeCap>${total.size.cap}</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout">
                <Pattern>${log.pattern}</Pattern>
            </layout>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="file_error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${error.log.file}</file>
        <!-- SizeAndTimeBasedRollingPolicy是基于时间和大小的滚动策略，几乎可以涵盖所有日志滚动需求场景，也是使用最多的策略 -->
        <!-- 该策略适用于1.1.7版本及之后的版本，之前的版本继续采用TimeBasedRollingPolicy加SizeAndTimeBasedFNATP组件实现 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件名格式 -->
            <FileNamePattern>${history.error.log.file}</FileNamePattern>
            <!-- 单个日志文件最大大小，当文件达到该大小则触发截断（以及压缩）-->
            <maxFileSize>${log.max.size}</maxFileSize>
            <!--只保留最近60天的日志-->
            <maxHistory>${log.max.history}</maxHistory>
            <!-- 日志文件保留的总的最大大小-->
            <totalSizeCap>${total.size.cap}</totalSizeCap>
        </rollingPolicy>
        <!-- 日志输出的文件的格式 -->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout">
                <Pattern>${log.pattern}</Pattern>
            </layout>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <level>ERROR</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- info异步输出 -->
    <appender name="async_all" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="file_all"/>
    </appender>

    <!-- error异步输出 -->
    <appender name="async_error" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="file_error"/>
    </appender>

    <!-- 开启 skywalking 日志收集 -->
    <include resource="logback-skylog.xml" />

    <!--系统操作日志-->
    <root level="info">
        <appender-ref ref="console"/>
        <appender-ref ref="async_all"/>
        <appender-ref ref="async_error"/>
    </root>

</configuration>
